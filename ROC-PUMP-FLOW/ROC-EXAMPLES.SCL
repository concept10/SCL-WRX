Here are five different ways to measure the rate of change of an analog value over five minutes using Siemens S7-1500 in Structured Control Language (SCL).

⸻

1. Using a Simple Difference Calculation

This method stores the analog value every five minutes and calculates the difference.

FUNCTION_BLOCK FB_RateOfChange_1
    VAR
        AnalogValue   : REAL;   // Current Analog Value
        PrevValue     : REAL;   // Stored Previous Value
        DeltaTime     : TIME := T#5M; // 5-minute interval
        LastUpdate    : TIME;   // Last update time
        RateOfChange  : REAL;   // Rate of Change Output
    END_VAR
BEGIN
    // Check if 5 minutes have passed
    IF (T_PLC_MS() - LastUpdate >= DeltaTime) THEN
        RateOfChange := (AnalogValue - PrevValue) / REAL_TO_TIME_IN_SECONDS(DeltaTime);
        PrevValue := AnalogValue;
        LastUpdate := T_PLC_MS(); // Reset timer
    END_IF;
END_FUNCTION_BLOCK

	•	Uses a simple difference method.
	•	Updates once every 5 minutes.
	•	Good for slow-changing processes.

⸻

2. Using a Moving Average for Smoother Results

This method calculates a moving average rate of change over multiple intervals.

FUNCTION_BLOCK FB_RateOfChange_2
    VAR
        AnalogValue  : REAL;
        Values       : ARRAY[1..5] OF REAL;  // Store last 5 readings
        Index        : INT := 1;
        RateOfChange : REAL;
        DeltaTime    : TIME := T#1M;  // Check every minute
        LastUpdate   : TIME;
    END_VAR
BEGIN
    // Check if 1 minute has passed
    IF (T_PLC_MS() - LastUpdate >= DeltaTime) THEN
        Values[Index] := AnalogValue;
        Index := (Index MOD 5) + 1;

        // Compute average rate of change
        RateOfChange := (Values[Index] - Values[(Index MOD 5) + 1]) / REAL_TO_TIME_IN_SECONDS(T#5M);
        LastUpdate := T_PLC_MS();
    END_IF;
END_FUNCTION_BLOCK

	•	Uses a rolling window of 5 readings (1 per minute).
	•	Provides smoother rate of change over 5 minutes.
	•	Good for noisy signals.

⸻

3. Using a FIFO Buffer for Real-Time Processing

This method stores values in a FIFO buffer and computes the change over 5 minutes.

FUNCTION_BLOCK FB_RateOfChange_3
    VAR
        AnalogValue  : REAL;
        Buffer       : ARRAY[1..5] OF REAL;  
        RateOfChange : REAL;
        DeltaTime    : TIME := T#1M;
        LastUpdate   : TIME;
    END_VAR
BEGIN
    // Shift buffer every minute
    IF (T_PLC_MS() - LastUpdate >= DeltaTime) THEN
        // Shift values in buffer
        Buffer[5] := Buffer[4];
        Buffer[4] := Buffer[3];
        Buffer[3] := Buffer[2];
        Buffer[2] := Buffer[1];
        Buffer[1] := AnalogValue;

        // Calculate rate of change
        RateOfChange := (Buffer[1] - Buffer[5]) / REAL_TO_TIME_IN_SECONDS(T#5M);
        LastUpdate := T_PLC_MS();
    END_IF;
END_FUNCTION_BLOCK

	•	Shifts the oldest values out every minute.
	•	Provides real-time updates every minute.
	•	Better for continuously changing values.

⸻

4. Using a Timer-Triggered Event

This method uses an IEC Timer (TON) to trigger a measurement every 5 minutes.

FUNCTION_BLOCK FB_RateOfChange_4
    VAR
        AnalogValue  : REAL;
        PrevValue    : REAL;
        RateOfChange : REAL;
        Timer        : TON;
    END_VAR
BEGIN
    // Start the 5-minute timer
    Timer(IN := TRUE, PT := T#5M);
    
    // When the timer finishes, calculate rate of change
    IF Timer.Q THEN
        RateOfChange := (AnalogValue - PrevValue) / REAL_TO_TIME_IN_SECONDS(T#5M);
        PrevValue := AnalogValue;
        Timer(IN := FALSE); // Reset Timer
    END_IF;
END_FUNCTION_BLOCK

	•	Uses an IEC timer (TON) for scheduled measurement.
	•	Doesn’t require PLC cycle-based timing.
	•	Best for cyclic batch processes.

⸻

5. Using a Derivative Function Block

This method approximates the instantaneous derivative using Siemens APL (Advanced Process Library).

FUNCTION_BLOCK FB_RateOfChange_5
    VAR
        AnalogValue  : REAL;
        dT           : REAL := 300.0;  // 5 minutes in seconds
        RateOfChange : REAL;
        DerivBlock   : FB41_DERIVATIVE;  // Siemens APL derivative block
    END_VAR
BEGIN
    // Call Siemens derivative function block
    DerivBlock(EN := TRUE, X := AnalogValue, T := dT, Y => RateOfChange);
END_FUNCTION_BLOCK

	•	Uses Siemens APL PID derivative block (FB41).
	•	Calculates instantaneous rate of change every scan cycle.
	•	Best for high-speed processes.

⸻

Comparison of Methods

Method	Update Rate	Best For	Complexity
1. Simple Difference	5 minutes	Slow processes	Easy
2. Moving Average	1 minute	Noisy signals	Medium
3. FIFO Buffer	1 minute	Real-time data	Medium
4. Timer Triggered	5 minutes	Cyclic/batch	Easy
5. Derivative Block	Every scan	High-speed changes	Advanced

Each of these methods has its advantages depending on the process dynamics. Which method would you like to explore further?